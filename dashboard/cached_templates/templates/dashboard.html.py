# -*- coding:ascii -*-
from mako import runtime, filters, cache
UNDEFINED = runtime.UNDEFINED
__M_dict_builtin = dict
__M_locals_builtin = locals
_magic_number = 10
_modified_time = 1438443998.668201
_enable_loop = True
_template_filename = 'C:\\Python34\\Lib\\site-packages\\django\\bin\\finance\\dashboard\\templates/dashboard.html'
_template_uri = 'dashboard.html'
_source_encoding = 'ascii'
import os, os.path, re
_exports = ['content']


def _mako_get_namespace(context, name):
    try:
        return context.namespaces[(__name__, name)]
    except KeyError:
        _mako_generate_namespaces(context)
        return context.namespaces[(__name__, name)]
def _mako_generate_namespaces(context):
    pass
def _mako_inherit(template, context):
    _mako_generate_namespaces(context)
    return runtime._inherit_from(context, '/homepage/templates/base.htm', _template_uri)
def render_body(context,**pageargs):
    __M_caller = context.caller_stack._push_frame()
    try:
        __M_locals = __M_dict_builtin(pageargs=pageargs)
        types_json = context.get('types_json', UNDEFINED)
        dc_json = context.get('dc_json', UNDEFINED)
        def content():
            return render_content(context._locals(__M_locals))
        pie_json = context.get('pie_json', UNDEFINED)
        __M_writer = context.writer()
        __M_writer('\r\n\r\n')
        if 'parent' not in context._data or not hasattr(context._data['parent'], 'content'):
            context['self'].content(**pageargs)
        

        __M_writer('\r\n')
        return ''
    finally:
        context.caller_stack._pop_frame()


def render_content(context,**pageargs):
    __M_caller = context.caller_stack._push_frame()
    try:
        types_json = context.get('types_json', UNDEFINED)
        dc_json = context.get('dc_json', UNDEFINED)
        def content():
            return render_content(context)
        pie_json = context.get('pie_json', UNDEFINED)
        __M_writer = context.writer()
        __M_writer('\r\n  <div class="content">\r\n    <h2 class="manage">Dashboard</h2>\r\n    <div class="clearfix"></div>\r\n    <br/>\r\n    <div class="row form-inline">\r\n      <div class="col-md-3">\r\n        <h3>Accounts Overview</h3>\r\n        <select id="d_list" onChange="updateData()">\r\n            <option value="All">All</option>\r\n            <option value="Checking">Checking</option>\r\n            <option value="Credit Card">Credit Card</option>\r\n            <option value="Investments">Investments</option>\r\n            <option value="Savings">Savings</option>\r\n            <option value="Other">Other</option>\r\n        </select>\r\n      </div>\r\n      <div class="col-md-3">\r\n      </div>\r\n      <div class="col-md-3">\r\n        <div class="text-right">\r\n          <h3>Lorem Ipsum</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class="row form-inline">\r\n    <div class="col-md-6">\r\n      <div class="bar_chart">\r\n      </div>\r\n    </div>\r\n    <div class="col-md-6">\r\n  <div>\r\n    Number of datapoints: \r\n    <input id="datacount" onkeyup="render()" value="15" name="datapoints"></input>\r\n  </div>\r\n    <div class="pie_chart">\r\n    </div>\r\n\r\n    </div>\r\n  </div>\r\n    <div class="col-md-3">\r\n      <h3>Credit vs Debit</h3>\r\n      <select id="l_list" onChange="updateLine()">\r\n          <option value="2015">2015</option>\r\n          <option value="2014">2014</option>\r\n      </select>\r\n    </div>\r\n  </div>\r\n  <div>\r\n    <div class="col-md-12">\r\n      <div class="line_chart">\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n    <script>\r\n      //#load in data, call loadGraph\r\n        var data = ')
        __M_writer(str(types_json))
        __M_writer('\r\n        loadGraph(data);\r\n      //#updateData//\r\n        function updateData() {\r\n          var remove = d3.select(".this_svg").remove()\r\n            //removes current table for filtered\r\n\r\n          var data = ')
        __M_writer(str(types_json))
        __M_writer('\r\n          var x = document.getElementById("d_list").selectedIndex;       \r\n\r\n          if (x == 1) {\r\n            console.log("checking")\r\n            var key2value = selectWhere(data, "Checking");\r\n          }\r\n          else if (x == 2) {\r\n            var key2value = selectWhere(data, "Credit Card");\r\n          }\r\n          else if (x == 3) {\r\n            var key2value = selectWhere(data, "Investments");\r\n          }\r\n          else if (x == 4) {\r\n            var key2value = selectWhere(data, "Savings");\r\n          }\r\n          else if (x == 5) {\r\n            var key2value = selectWhere(data, "Other");\r\n          }\r\n          else{\r\n            loadGraph(data);\r\n          }\r\n        }\r\n\r\n      //#called to create the filtered data\r\n        function selectWhere(data, propertyName) {\r\n          var acc_data = []\r\n          for (var i = 0; i < data.length; i++) {\r\n            if (data[i][2] === propertyName) {\r\n              acc_data[acc_data.length] = data[i];\r\n              //return data[i];\r\n            }\r\n          }\r\n          loadGraph(acc_data);\r\n        }\r\n      //#loads graph\r\n        function loadGraph(data) {\r\n        //#set margins, build svg bar_chart\r\n          var margin = {top: 40, right: 20, bottom: 30, left: 60},\r\n              width = 700 - margin.left - margin.right,\r\n              height = 500 - margin.top - margin.bottom;\r\n\r\n          var x = d3.scale.ordinal()\r\n              .rangeRoundBands([0, width], .2);\r\n\r\n          var y = d3.scale.linear()\r\n              .range([height, 0]);\r\n\r\n          var xAxis = d3.svg.axis()\r\n              .scale(x)\r\n              .orient("bottom");\r\n\r\n          var yAxis = d3.svg.axis()\r\n              .scale(y)\r\n              .orient("left");\r\n\r\n          var tip = d3.tip()\r\n            .attr(\'class\', \'d3-tip\')\r\n            .offset([-10, 0])\r\n            .html(function(d) {\r\n              return "<strong>Acount:</strong> <span style=\'color:red\'>" + d[0] + "</span>" +"<br/>" + \r\n              "<strong>Amount:</strong> <span style=\'color:red\'>" + d[1] + "</span>";\r\n            })\r\n\r\n          var svg = d3.select(".bar_chart").append("svg")\r\n              .attr("width", width + margin.left + margin.right)\r\n              .attr("height", height + margin.top + margin.bottom)\r\n              .attr("id", "svg_bar")\r\n              .attr("class", "this_svg")\r\n            .append("g")\r\n              .attr("id", "g_bar")\r\n              .attr("transform", "translate(" + margin.left + "," + margin.top + ")");\r\n\r\n          svg.call(tip);\r\n          //starts the chart at 0, handles if there is only one account\r\n          data[data.length] = ["", 0, ""]\r\n\r\n          x.domain(data.map(function(d) { return d[0]; }));\r\n          y.domain(d3.extent(data, function(d) { return +d[1]; })).nice();\r\n\r\n          /*  ////adds x axis////\r\n            svg.append("g")\r\n                .attr("class", "x axis")\r\n                .attr("id", "g_bar")\r\n                .attr("transform", "translate(0," + height + ")")\r\n                .call(xAxis);\r\n          */\r\n          /* ///Automatic Transition///\r\n            svg.selectAll("g").remove();\r\n            svg.selectAll("text").remove();\r\n          */\r\n          svg.append("g")\r\n              .attr("class", "y axis")\r\n              .attr("id", "g_bar")\r\n              .call(yAxis)\r\n            .append("text")\r\n              .attr("transform", "rotate(-90)")\r\n              .attr("y", 6)\r\n              .attr("dy", ".71em")\r\n              .style("text-anchor", "end");\r\n\r\n            svg.selectAll(".bar")\r\n                .data(data)\r\n            .enter().append("rect")\r\n                .attr("class", function(d) { return d[1] < 0 ? "bar negative" : "bar positive"; })\r\n                .attr("y", function(d) { return y(Math.max(0, d[1])); })\r\n                .attr("x", function(d) { return x(d[0]); })\r\n                .on(\'mouseover\', tip.show)\r\n                .on(\'mouseout\', tip.hide)\r\n                .transition()\r\n                  .ease("elastic")\r\n                .delay(function (d, i) { return i*100; })\r\n                .attr("height", function(d) { return Math.abs(y(d[1]) - y(0)); })\r\n                .attr("width", x.rangeBand())\r\n        /* ///Automatic Transition///\r\n          var rect = svg.selectAll("rect")\r\n            .data(data);\r\n\r\n          rect.attr("id", "update");\r\n\r\n          rect.enter().append("rect")\r\n            .attr("id", "enter")\r\n            .attr("class", function(d) { return d[1] < 0 ? "bar negative" : "bar positive"; })\r\n            .attr("y", function(d) { return y(Math.max(0, d[1])); })\r\n            .attr("x", function(d) { return x(d[0]); })\r\n            .on(\'mouseover\', tip.show)\r\n            .on(\'mouseout\', tip.hide)\r\n            .transition()\r\n              .ease("elastic")\r\n            .delay(function (d, i) { return i*100; })\r\n            .attr("height", function(d) { return Math.abs(y(d[1]) - y(0)); })\r\n            .attr("width", x.rangeBand());\r\n          rect.text(function(d) { return d; });\r\n          rect.exit().remove();\r\n        */\r\n            function type(d) {\r\n              d[1] = +d[1];\r\n              return d;\r\n            }\r\n        }\r\n    </script>\r\n\r\n    <script>\r\n        //load the initial graph data (year 2015)\r\n        var d_data = ')
        __M_writer(str(dc_json))
        __M_writer('\r\n        var data = d_data.filter(function(d) {\r\n            return d[3] == "2015";\r\n          });\r\n        loadLine(data);\r\n\r\n        function parse(date) {\r\n          //parse the dates into month format\r\n            var p = d3.time.format("%Y-%m-%d").parse;\r\n            //var o = d3.time.format("%m")\r\n            \r\n            var p_date = p(date)\r\n            //var o_date = o(p_date)\r\n            return p_date\r\n          };\r\n\r\n        //preps the filter data\r\n        function updateLine() {\r\n            var remove = d3.select(".svg_line").remove()\r\n              //removes current table for filtered\r\n              \r\n            var data = ')
        __M_writer(str(dc_json))
        __M_writer('\r\n            var x = document.getElementById("l_list").selectedIndex;       \r\n\r\n            if (x == 1) {\r\n              var key2value = lineFilter(data, "2014");\r\n            }\r\n            else{\r\n              var key2value = lineFilter(data, "2015")\r\n            }\r\n          };\r\n\r\n          //#called to create the filtered data\r\n        function lineFilter(data, propertyName) {\r\n            var new_data = data.filter(function(d) {\r\n                return d[3] == propertyName;\r\n              });\r\n            loadLine(new_data);\r\n          };\r\n\r\n        //initial graph load.\r\n        function loadLine(data){\r\n          var margin = {top: 50, right: 60, bottom: 80, left: 60},\r\n              width = 1100 - margin.left - margin.right,\r\n              height = 600 - margin.top - margin.bottom;   \r\n\r\n          // Scales and axes. Note the inverted domain for the y-scale: bigger is up!\r\n          var x = d3.time.scale()\r\n                  .range([0, width]);\r\n          var y = d3.scale.linear().range([height, 0]);\r\n          var yAxis = d3.svg.axis().scale(y).ticks(4).orient("right");\r\n          var xAxis = d3.svg.axis()\r\n                      .scale(x)\r\n                      .ticks(d3.time.months)\r\n                      .tickSize(-height)\r\n                      .tickFormat(d3.time.format("%b"));\r\n\r\n          // An area generator, for the light fill.\r\n          var area = d3.svg.area()\r\n              .interpolate("monotone")\r\n              .x(function(d) { return x(parse(d[0])); })\r\n              .y0(height)\r\n              .y1(function(d) { return y(+d[1]); });\r\n\r\n          // A line generator, for the dark stroke.\r\n          var line = d3.svg.line()\r\n              .interpolate("monotone")\r\n              .x(function(d) { return x(parse(d[0])); })\r\n              .y(function(d) { return y(+d[1]); });\r\n\r\n\r\n            // Filter to one type\r\n            var credit = data.filter(function(d) {\r\n              return d[2] == "credit";\r\n            });\r\n\r\n            var debit = data.filter(function(d) {\r\n              return d[2] == "debit";\r\n            });\r\n\r\n            var x_deb_min = d3.min(debit, function(d) { return parse(d[0]); })\r\n            var x_cred_min = d3.min(credit, function(d) { return parse(d[0]); })\r\n            var x_deb_max = d3.max(debit, function(d) { return parse(d[0]); })\r\n            var x_cred_max = d3.max(credit, function(d) { return parse(d[0]); })\r\n\r\n            var y_deb_min = d3.min(debit, function(d) { return +d[1]; })\r\n            var y_cred_min = d3.min(credit, function(d) { return +d[1]; })\r\n            var y_deb_max = d3.max(debit, function(d) { return +d[1]; })\r\n            var y_cred_max = d3.max(credit, function(d) { return +d[1]; })\r\n\r\n            //decides the x domain\r\n            if (x_deb_min <= x_cred_min) {\r\n              if (x_deb_max >= x_cred_max) {\r\n                x.domain([x_deb_min, x_deb_max]).nice();             \r\n              }\r\n              else {\r\n                x.domain([x_deb_min, x_cred_max]).nice();\r\n              }\r\n            }\r\n            else {\r\n              if (x_deb_max >= x_cred_max) {\r\n                x.domain([x_cred_min, x_deb_max]).nice();                \r\n              }\r\n              else {\r\n                x.domain([x_cred_min, x_cred_max]).nice();                \r\n              }\r\n            }\r\n\r\n            //decides the y domain\r\n            if (y_deb_min <= y_cred_min) {\r\n              if (y_deb_max >= y_cred_max) {\r\n                y.domain([y_deb_min, y_deb_max]).nice();                                \r\n              }\r\n              else {\r\n                y.domain([y_deb_min, y_cred_max]).nice();                \r\n              }\r\n            }\r\n            else {\r\n              if (y_deb_max >= y_cred_max) {\r\n                y.domain([y_cred_min, y_deb_max]).nice();                \r\n              }\r\n              else {\r\n                y.domain([y_cred_min, y_cred_max]).nice();                \r\n              }\r\n            }\r\n\r\n            // Add an SVG element with the desired dimensions and margin.\r\n            var svg = d3.select(".line_chart").append("svg")\r\n                .attr("width", width + margin.left + margin.right)\r\n                .attr("height", height + margin.top + margin.bottom)\r\n                .attr("class", "svg_line")\r\n              .append("g")\r\n                .attr("transform", "translate(" + margin.left + "," + margin.top + ")")\r\n          \r\n            // Add the clip path.\r\n            svg.append("clipPath")\r\n                .attr("id", "clip")\r\n              .append("rect")\r\n                .attr("width", width)\r\n                .attr("height", height);\r\n\r\n            // Add the x-axis.\r\n            svg.append("g")\r\n                .attr("class", "x axis")\r\n                .attr("transform", "translate(0," + height + ")")\r\n                .call(xAxis);\r\n\r\n            // Add the y-axis.\r\n            svg.append("g")\r\n                .attr("class", "y axis")\r\n                .attr("transform", "translate(" + width + ",0)")\r\n                .call(yAxis);\r\n\r\n            var colors = d3.scale.category10();\r\n            svg.selectAll(\'.line\')\r\n              .data([credit, debit])\r\n              .enter()\r\n                .append(\'path\')\r\n                  .attr(\'class\', \'line\')\r\n                  .style(\'stroke\', function(d) {\r\n                    var x = colors(Math.random() * 50)\r\n                    return x;\r\n                  })\r\n                  .attr(\'clip-path\', \'url(#clip)\')\r\n                  .attr(\'d\', function(d) {\r\n                    return line(d);\r\n                  })\r\n          \r\n            var cTip = d3.tip()\r\n              .attr(\'class\', \'d3-tip\')\r\n              .offset([-10, 0])\r\n              .html(function(d) {\r\n                return "<strong>Credit transactions are those which add money to your accounts; i.e., a deposit in your checking account.</strong>";\r\n              })\r\n            var dTip = d3.tip()\r\n              .attr(\'class\', \'d3-tip\')\r\n              .offset([-10, 0])\r\n              .html(function(d) {\r\n                return "<strong>Debit transactions are those which take money from your accounts; i.e., spending money to buy 5 Guys.</strong>";\r\n              })\r\n\r\n            svg.call(cTip);\r\n            svg.call(dTip);\r\n\r\n            svg.append("text")\r\n              .attr("x", (width*.45))\r\n              .attr("y", height + (margin.bottom/2)+25)\r\n              .attr("fill", "#1f77b4")\r\n              .attr("class", "legend")\r\n              .on(\'mouseover\', cTip.show)\r\n              .on(\'mouseout\', cTip.hide)\r\n              .text("Credit");\r\n            svg.append("text")\r\n              .attr("x", (width*.55))\r\n              .attr("y", height + (margin.bottom/2)+25)\r\n              .attr("fill", "#ff7f0e")\r\n              .attr("class", "legend")\r\n              .on(\'mouseover\', dTip.show)\r\n              .on(\'mouseout\', dTip.hide)\r\n              .text("Debit");\r\n\r\n            /* Add \'curtain\' rectangle to hide entire graph */\r\n            var curtain = svg.append(\'rect\')\r\n              .attr(\'x\', -1 * width)\r\n              .attr(\'y\', -1 * height)\r\n              .attr(\'height\', height)\r\n              .attr(\'width\', width)\r\n              .attr(\'class\', \'curtain\')\r\n              .attr(\'transform\', \'rotate(180)\')\r\n              .style(\'fill\', \'#ffffff\')\r\n\r\n            /* Optionally add a guideline */\r\n            var guideline = svg.append(\'line\')\r\n              .attr(\'stroke\', \'#333\')\r\n              .attr(\'stroke-width\', 0)\r\n              .attr(\'class\', \'guide\')\r\n              .attr(\'x1\', 1)\r\n              .attr(\'y1\', 1)\r\n              .attr(\'x2\', 1)\r\n              .attr(\'y2\', height)\r\n\r\n            /* Create a shared transition for anything we are animating */\r\n            var t = svg.transition()\r\n              .delay(750)\r\n              .duration(6000)\r\n              .ease(\'linear\')\r\n              .each(\'end\', function() {\r\n                d3.select(\'line.guide\')\r\n                  .transition()\r\n                  .style(\'opacity\', 0)\r\n                  .remove()\r\n              });\r\n\r\n            t.select(\'rect.curtain\')\r\n              .attr(\'width\', 0);\r\n            t.select(\'line.guide\')\r\n              .attr(\'transform\', \'translate(\' + width + \', 0)\')\r\n\r\n            d3.select("#show_guideline").on("change", function(e) {\r\n              guideline.attr(\'stroke-width\', this.checked ? 1 : 0);\r\n              curtain.attr("opacity", this.checked ? 0.75 : 1);\r\n            })\r\n\r\n          // Parse dates and numbers. We assume values are sorted by date.\r\n          function type(d) {\r\n            d[0] = parse(d[0]);\r\n            d[1] = +d[1];\r\n            console.log("here")\r\n            return d;\r\n          } \r\n        };\r\n    </script>\r\n\r\n    <script>\r\n      \r\n      var data = ')
        __M_writer(str(pie_json))
        __M_writer('\r\n      console.log(data)\r\n\r\n      var width = 960,\r\n          height = 500,\r\n          radius = Math.min(width, height) / 2;\r\n\r\n      var color = d3.scale.ordinal()\r\n          .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);\r\n\r\n      var arc = d3.svg.arc()\r\n          .outerRadius(radius - 10)\r\n          .innerRadius(0);\r\n\r\n      var pie = d3.layout.pie()\r\n          .sort(null)\r\n          .value(function(d) { return +d[2]; });\r\n\r\n      var svg = d3.select(".pie_chart").append("svg")\r\n          .attr("width", width)\r\n          .attr("height", height)\r\n          .attr("class", "pie_svg")\r\n        .append("g")\r\n          .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");\r\n\r\n        data.forEach(function(d) {\r\n          d[2] = +d[2];\r\n          });\r\n        \r\n        var g = svg.selectAll(".arc")\r\n            .data(pie(data))\r\n          .enter().append("g")\r\n            .attr("class", "arc");\r\n\r\n        g.append("path")\r\n            .attr("d", arc)\r\n            .attr("id", "color")\r\n            .style("fill", function(d) { return color(d.data[0]); });\r\n\r\n        g.append("text")\r\n            .attr("transform", function(d) { return "translate(" + arc.centroid(d) + ")"; })\r\n            .attr("dy", ".35em")\r\n            .style("text-anchor", "middle")\r\n            .text(function(d) { return d.data[0]; });\r\n         \r\n    </script>\r\n\r\n\r\n\r\n    </body>\r\n  </div>\r\n')
        return ''
    finally:
        context.caller_stack._pop_frame()


"""
__M_BEGIN_METADATA
{"source_encoding": "ascii", "line_map": {"64": 233, "65": 233, "66": 467, "27": 0, "37": 1, "73": 67, "42": 518, "48": 3, "67": 467, "57": 3, "58": 61, "59": 61, "60": 68, "61": 68, "62": 212, "63": 212}, "filename": "C:\\Python34\\Lib\\site-packages\\django\\bin\\finance\\dashboard\\templates/dashboard.html", "uri": "dashboard.html"}
__M_END_METADATA
"""
